#ifndef _ASM_X86_INTEL_PUNIT_IPC_H_
#define  _ASM_X86_INTEL_PUNIT_IPC_H_

#include <linux/platform_data/x86/intel_ipc_dev.h>

typedef enum {
	BIOS_IPC = 0,
	GTDRIVER_IPC,
	ISPDRIVER_IPC,
	RESERVED_IPC,
} IPC_TYPE;

#define PUNIT_BIOS_IPC_DEV			"punit_bios_ipc"
#define PUNIT_GTD_IPC_DEV			"punit_gtd_ipc"
#define PUNIT_ISP_IPC_DEV			"punit_isp_ipc"
#define PUNIT_PARAM_LEN				3

/* BIOS => Pcode commands */
#define IPC_PUNIT_BIOS_ZERO			(0x00)
#define IPC_PUNIT_BIOS_VR_INTERFACE		(0x01)
#define IPC_PUNIT_BIOS_READ_PCS			(0x02)
#define IPC_PUNIT_BIOS_WRITE_PCS		(0x03)
#define IPC_PUNIT_BIOS_READ_PCU_CONFIG		(0x04)
#define IPC_PUNIT_BIOS_WRITE_PCU_CONFIG		(0x05)
#define IPC_PUNIT_BIOS_READ_PL1_SETTING		(0x06)
#define IPC_PUNIT_BIOS_WRITE_PL1_SETTING	(0x07)
#define IPC_PUNIT_BIOS_TRIGGER_VDD_RAM		(0x08)
#define IPC_PUNIT_BIOS_READ_TELE_INFO		(0x09)
#define IPC_PUNIT_BIOS_READ_TELE_TRACE_CTRL	(0x0a)
#define IPC_PUNIT_BIOS_WRITE_TELE_TRACE_CTRL	(0x0b)
#define IPC_PUNIT_BIOS_READ_TELE_EVENT_CTRL	(0x0c)
#define IPC_PUNIT_BIOS_WRITE_TELE_EVENT_CTRL	(0x0d)
#define IPC_PUNIT_BIOS_READ_TELE_TRACE		(0x0e)
#define IPC_PUNIT_BIOS_WRITE_TELE_TRACE		(0x0f)
#define IPC_PUNIT_BIOS_READ_TELE_EVENT		(0x10)
#define IPC_PUNIT_BIOS_WRITE_TELE_EVENT		(0x11)
#define IPC_PUNIT_BIOS_READ_MODULE_TEMP		(0x12)
#define IPC_PUNIT_BIOS_RESERVED			(0x13)
#define IPC_PUNIT_BIOS_READ_VOLTAGE_OVER	(0x14)
#define IPC_PUNIT_BIOS_WRITE_VOLTAGE_OVER	(0x15)
#define IPC_PUNIT_BIOS_READ_RATIO_OVER		(0x16)
#define IPC_PUNIT_BIOS_WRITE_RATIO_OVER		(0x17)
#define IPC_PUNIT_BIOS_READ_VF_GL_CTRL		(0x18)
#define IPC_PUNIT_BIOS_WRITE_VF_GL_CTRL		(0x19)
#define IPC_PUNIT_BIOS_READ_FM_SOC_TEMP_THRESH	(0x1a)
#define IPC_PUNIT_BIOS_WRITE_FM_SOC_TEMP_THRESH	(0x1b)

/* GT Driver => Pcode commands */
#define IPC_PUNIT_GTD_ZERO			(0x00)
#define IPC_PUNIT_GTD_CONFIG			(0x01)
#define IPC_PUNIT_GTD_READ_ICCP_LIC_CDYN_SCAL	(0x02)
#define IPC_PUNIT_GTD_WRITE_ICCP_LIC_CDYN_SCAL	(0x03)
#define IPC_PUNIT_GTD_GET_WM_VAL		(0x06)
#define IPC_PUNIT_GTD_WRITE_CONFIG_WISHREQ	(0x07)
#define IPC_PUNIT_GTD_READ_REQ_DUTY_CYCLE	(0x16)
#define IPC_PUNIT_GTD_DIS_VOL_FREQ_CHG_REQUEST	(0x17)
#define IPC_PUNIT_GTD_DYNA_DUTY_CYCLE_CTRL	(0x1a)
#define IPC_PUNIT_GTD_DYNA_DUTY_CYCLE_TUNING	(0x1c)

/* ISP Driver => Pcode commands */
#define IPC_PUNIT_ISPD_ZERO			(0x00)
#define IPC_PUNIT_ISPD_CONFIG			(0x01)
#define IPC_PUNIT_ISPD_GET_ISP_LTR_VAL		(0x02)
#define IPC_PUNIT_ISPD_ACCESS_IU_FREQ_BOUNDS	(0x03)
#define IPC_PUNIT_ISPD_READ_CDYN_LEVEL		(0x04)
#define IPC_PUNIT_ISPD_WRITE_CDYN_LEVEL		(0x05)

/* Error codes */
#define IPC_PUNIT_ERR_SUCCESS			0
#define IPC_PUNIT_ERR_INVALID_CMD		1
#define IPC_PUNIT_ERR_INVALID_PARAMETER		2
#define IPC_PUNIT_ERR_CMD_TIMEOUT		3
#define IPC_PUNIT_ERR_CMD_LOCKED		4
#define IPC_PUNIT_ERR_INVALID_VR_ID		5
#define IPC_PUNIT_ERR_VR_ERR			6

static inline void punit_cmd_init(u32 *cmd, u32 param1, u32 param2, u32 param3)
{
	cmd[0] = param1;
	cmd[1] = param2;
	cmd[2] = param3;
}

#endif
