=================
Kernel driver occ
=================

Supported chips:
 * POWER8
 * POWER9

Please note that the driver does not run on these processors. Instead, the
driver runs on a connected service processor, such as an AST2400. (see the
BMC - Host Communications section).

Author: Eddie James <eajames@us.ibm.com>

Description
-----------

This driver implements support for the OCC (On-Chip Controller) on the IBM
POWER8 and POWER9 processors, from a BMC (Baseboard Management Controller). The
OCC is an embedded processor that provides real time power and thermal
monitoring.

This driver provides an interface on a BMC to poll OCC sensor data, set user
power caps, and perform some basic OCC error handling.

Currently, all versions of the OCC support four types of sensor data: power,
temperature, frequency, and "caps," which indicate limits and thresholds used
internally on the OCC.

The format for the POWER8 OCC sensor data can be found in the P8 OCC
specification:
github.com/open-power/docs/blob/master/occ/OCC_OpenPwr_FW_Interfaces.pdf
This document provides the details of the OCC sensors: power, frequency,
temperature, and caps. These sensor formats are specific to the POWER8 OCC. A
number of data structures, such as command format, response headers, and the
like, are also defined in this specification, and are common to both POWER8 and
POWER9 OCCs.

sysfs Entries
-------------

The OCC driver uses the hwmon sysfs framework to provide data to userspace.

The driver exports a number of sysfs files for each type of sensor. The
sensor-specific files vary depending on the processor type, though many of the
attributes are common for both the POWER8 and POWER9.

The hwmon interface cannot define every type of sensor that may be used.
Therefore, the frequency sensor on the OCC uses the "input" type sensor defined
by the hwmon interface, rather than defining a new type of custom sensor.

Below are detailed the names and meaning of each sensor file for both types of
processors. All sensors are read-only unless otherwise specified. <x> indicates
the hwmon index. sensor id indicates the unique internal OCC identifer. Please
see the POWER OCC specification for details on all these sensor values.

frequency:
	all processors:
		in<x>_input - frequency value
		in<x>_label - sensor id
temperature:
	POWER8:
		temp<x>_input - temperature value
		temp<x>_label - sensor id
	POWER9 (in addition to above):
		temp<x>_type - FRU type

power:
	POWER8:
		power<x>_input - power value
		power<x>_label - sensor id
		power<x>_average - accumulator
		power<x>_average_interval - update tag (number of samples in
			accumulator)
	POWER9:
		power<x>_input - power value
		power<x>_label - sensor id
		power<x>_average_min - accumulator[0]
		power<x>_average_max - accumulator[1] (64 bits total)
		power<x>_average_interval - update tag
		power<x>_reset_history - (function_id | (apss_channel << 8)

caps:
	POWER8:
		power<x>_cap - current powercap
		power<x>_cap_max - max powercap
		power<x>_cap_min - min powercap
		power<x>_max - normal powercap
		power<x>_alarm - user powercap, r/w
	POWER9:
		power<x>_cap_alarm - user powercap source

The driver also provides two sysfs entries through hwmon to better
control the driver and monitor the master OCC. Though there may be multiple
OCCs present on the system, these two files are only present for the "master"
OCC.
	name - read the name of the driver
	update_interval - read or write the minimum interval for polling the
		OCC.

BMC - Host Communications
-------------------------

For the POWER8 application, the BMC can communicate with the P8 over I2C bus.
However, to access the OCC register space, any data transfer must use a SCOM
operation. SCOM is a procedure to initiate a data transfer, typically of 8
bytes. SCOMs consist of writing a 32-bit command register and then
reading/writing two 32-bit data registers. This driver implements these
SCOM operations over I2C bus in order to communicate with the OCC.

For the POWER9 application, the BMC can communicate with the P9 over FSI bus
and SBE engine. Once again, SCOM operations are required. This driver will
implement SCOM ops over FSI/SBE. This will require the FSI driver.
