config HAVE_ARCH_KASAN
	bool

config HAVE_ARCH_KASAN_HW
	bool

if HAVE_ARCH_KASAN

config KASAN
	bool "KASAN: runtime memory debugger"
	help
	  Enables KASAN (KernelAddressSANitizer) - runtime memory debugger,
	  designed to find out-of-bounds accesses and use-after-free bugs.

choice
	prompt "KASAN mode"
	depends on KASAN
	default KASAN_GENERIC
	help
	  KASAN has two modes: KASAN (a classic version, similar to userspace
	  ASan, enabled with CONFIG_KASAN_GENERIC) and KHWASAN (a version
	  based on pointer tagging, only for arm64, similar to userspace
	  HWASan, enabled with CONFIG_KASAN_HW).

config KASAN_GENERIC
	bool "KASAN: the generic mode"
	depends on (SLUB && SYSFS) || (SLAB && !DEBUG_SLAB)
	select SLUB_DEBUG if SLUB
	select CONSTRUCTORS
	select STACKDEPOT
	help
	  Enables the generic mode of KASAN.
	  This is strictly a debugging feature and it requires a GCC version
	  of 4.9.2 or later. Detection of out-of-bounds accesses to stack or
	  global variables requires GCC 5.0 or later.
	  This mode consumes about 1/8 of available memory at kernel start
	  and introduces an overhead of ~x1.5 for the rest of the allocations.
	  The performance slowdown is ~x3.
	  For better error detection enable CONFIG_STACKTRACE.
	  Currently CONFIG_KASAN_GENERIC doesn't work with CONFIG_DEBUG_SLAB
	  (the resulting kernel does not boot).

if HAVE_ARCH_KASAN_HW

config KASAN_HW
	bool "KHWASAN: the hardware assisted mode"
	depends on (SLUB && SYSFS) || (SLAB && !DEBUG_SLAB)
	select SLUB_DEBUG if SLUB
	select CONSTRUCTORS
	select STACKDEPOT
	help
	  Enabled KHWASAN (KASAN mode based on pointer tagging).
	  This mode requires Top Byte Ignore support by the CPU and therefore
	  only supported for arm64.
	  This feature requires clang revision 330044 or later.
	  This mode consumes about 1/16 of available memory at kernel start
	  and introduces an overhead of ~20% for the rest of the allocations.
	  For better error detection enable CONFIG_STACKTRACE.
	  Currently CONFIG_KASAN_HW doesn't work with CONFIG_DEBUG_SLAB
	  (the resulting kernel does not boot).

endif

endchoice

config KASAN_EXTRA
	bool "KASAN: extra checks"
	depends on KASAN_GENERIC && DEBUG_KERNEL && !COMPILE_TEST
	help
	  This enables further checks in KASAN, for now it only includes the
	  address-use-after-scope check that can lead to excessive kernel
	  stack usage, frame size warnings and longer compile time.
	  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 has more


choice
	prompt "Instrumentation type"
	depends on KASAN
	default KASAN_OUTLINE

config KASAN_OUTLINE
	bool "Outline instrumentation"
	help
	  Before every memory access compiler insert function call
	  __asan_load*/__asan_store*. These functions performs check
	  of shadow memory. This is slower than inline instrumentation,
	  however it doesn't bloat size of kernel's .text section so
	  much as inline does.

config KASAN_INLINE
	bool "Inline instrumentation"
	help
	  Compiler directly inserts code checking shadow memory before
	  memory accesses. This is faster than outline (in some workloads
	  it gives about x2 boost over outline instrumentation), but
	  make kernel's .text size much bigger.
	  For CONFIG_KASAN_GENERIC this requires GCC 5.0 or later.

endchoice

config TEST_KASAN
	tristate "Module for testing KASAN for bug detection"
	depends on m && KASAN
	help
	  This is a test module doing various nasty things like
	  out of bounds accesses, use after free. It is useful for testing
	  kernel debugging features like KASAN.

endif
