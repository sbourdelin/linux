/*
 * Spreatrum clock pll configurations
 *
 * Copyright (C) 2015~2017 Spreadtrum, Inc.
 *
 * SPDX-License-Identifier: GPL-2.0
 */

#ifndef __SPRD_PLL_CFG_H__
#define __SPRD_PLL_CFG_H__

#include "pll.h"

static struct sprd_pll_config sc9836_pll_config[] = {
	{
		.name = "sc9836_pll",
		.udelay = SPRD_DELAY_1000,
		.lock_done.value = 1 << 27,
		.lock_done.index = 0,
		.div_s.value = 1 << 26,
		.div_s.index = 0,
		.mod_en.value = 1 << 25,
		.mod_en.index = 0,
		.sdm_en.value = 1 << 24,
		.sdm_en.index = 0,
		.refin_msk.value = 3 << 18,
		.refin_msk.index = 0,
		.ibias_msk.value = 3 << 16,
		.ibias_msk.index = 0,
		.pll_n_msk.value = 0x7ff,
		.pll_n_msk.index = 0,
		.nint_msk.value = 0x3f << 24,
		.nint_msk.index = 1,
		.kint_msk.value = 0xfffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0,
		.prediv_msk.index = 0,
		.postdiv_msk.value = 0x0,
		.itable = NULL,
	},

	/* add configures above this */
	{
		.name = NULL,
	}
};

/* GPLL/LPLL/DPLL/RPLL/CPLL */
static struct pll_ibias_table sc9860_adjustable_pll1_table[] = {
	{
		.rate = 780000000,
		.ibias = 0x0,
	},
	{
		.rate = 988000000,
		.ibias = 0x1,
	},
	{
		.rate = 1196000000,
		.ibias = 0x2,
	},

	/* add items above this */
	{
		.rate = SPRD_PLL_MAX_RATE,
		.ibias = 0x2,
	},
};

/* TWPLL/MPLL0/MPLL1 */
static struct pll_ibias_table sc9860_adjustable_pll2_table[] = {
	{
		.rate = 1638000000,
		.ibias = 0x0,
	},
	{
		.rate = 2080000000,
		.ibias = 0x1,
	},
	{
		.rate = 2600000000UL,
		.ibias = 0x2,
	},

	/* add items above this */
	{
		.rate = SPRD_PLL_MAX_RATE,
		.ibias = 0x2,
	},
};

static struct fvco_threshold sc9860_mpll0_threshold = {
	.rate = 1300000000,
	.flag = 1,
};

static struct fvco_threshold sc9860_gpll_threshold = {
	.rate = 600000000,
	.flag = 1,
};

static struct sprd_pll_config sc9860_pll_config[] = {
	{
		.name  = "clk_mpll0",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 20),
		.lock_done.index = 0,
		.div_s.value = (1 << 19),
		.div_s.index = 0,
		.mod_en.value = (1 << 18),
		.mod_en.index = 0,
		.sdm_en.value = (1 << 17),
		.sdm_en.index = 0,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 11),
		.ibias_msk.index = 0,
		.pll_n_msk.value = (0x7f),
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 25),
		.nint_msk.index = 1,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0x0,
		.postdiv_msk.value = (1 << 24),
		.postdiv_msk.index = 1,
		.postdiv_msk.fvco_threshold = &sc9860_mpll0_threshold,
		.itable = sc9860_adjustable_pll2_table,
	},
	{
		.name  = "clk_mpll1",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 20),
		.lock_done.index = 0,
		.div_s.value = (1 << 19),
		.div_s.index = 0,
		.mod_en.value = (1 << 18),
		.mod_en.index = 0,
		.sdm_en.value = (1 << 17),
		.sdm_en.index = 0,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 11),
		.ibias_msk.index = 0,
		.pll_n_msk.value = 0x7f,
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 25),
		.nint_msk.index = 1,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = (1 << 24),
		.prediv_msk.index = 1,
		.postdiv_msk.value = 0x0,
		.itable = sc9860_adjustable_pll2_table,
	},
	{
		.name  = "clk_gpll",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 18),
		.lock_done.index = 0,
		.div_s.value = (1 << 15),
		.div_s.index = 0,
		.mod_en.value = (1 << 14),
		.mod_en.index = 0,
		.sdm_en.value = (1 << 13),
		.sdm_en.index = 0,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 8),
		.ibias_msk.index = 0,
		.pll_n_msk.value = 0x7f,
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 25),
		.nint_msk.index = 1,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0x0,
		.postdiv_msk.fvco_threshold = &sc9860_gpll_threshold,
		.postdiv_msk.value = (1 << 17),
		.postdiv_msk.index = 0,
		.itable = sc9860_adjustable_pll1_table,
	},
	{
		.name  = "clk_dpll0",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 16),
		.lock_done.index = 0,
		.div_s.value = (1 << 15),
		.div_s.index = 0,
		.mod_en.value = (1 << 14),
		.mod_en.index = 0,
		.sdm_en.value = (1 << 13),
		.sdm_en.index = 0,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 8),
		.ibias_msk.index = 0,
		.pll_n_msk.value = 0x7f,
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 25),
		.nint_msk.index = 1,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0x0,
		.postdiv_msk.value = 0x0,
		.itable = sc9860_adjustable_pll1_table,
	},
	{
		.name  = "clk_dpll1",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 16),
		.lock_done.index = 0,
		.div_s.value = (1 << 15),
		.div_s.index = 0,
		.mod_en.value = (1 << 14),
		.mod_en.index = 0,
		.sdm_en.value = (1 << 13),
		.sdm_en.index = 0,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 8),
		.ibias_msk.index = 0,
		.pll_n_msk.value = 0x7f,
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 25),
		.nint_msk.index = 1,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0x0,
		.postdiv_msk.value = 0x0,
		.itable = sc9860_adjustable_pll1_table,
	},
	{
		.name  = "clk_twpll",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 21),
		.lock_done.index = 0,
		.div_s.value = (1 << 20),
		.div_s.index = 0,
		.mod_en.value = (1 << 19),
		.mod_en.index = 0,
		.sdm_en.value = (1 << 18),
		.sdm_en.index = 0,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 13),
		.ibias_msk.index = 0,
		.pll_n_msk.value = 0x7f,
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 25),
		.nint_msk.index = 1,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0x0,
		.postdiv_msk.value = 0x0,
		.itable = sc9860_adjustable_pll2_table,
	},
	{
		.name  = "clk_ltepll0",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 31),
		.lock_done.index = 0,
		.div_s.value = (1 << 27),
		.div_s.index = 0,
		.mod_en.value = (1 << 26),
		.mod_en.index = 0,
		.sdm_en.value = (1 << 25),
		.sdm_en.index = 0,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 20),
		.ibias_msk.index = 0,
		.pll_n_msk.value = 0x7f,
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 25),
		.nint_msk.index = 1,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0x0,
		.postdiv_msk.value = 0x0,
		.itable = sc9860_adjustable_pll1_table,
	},
	{
		.name  = "clk_ltepll1",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 31),
		.lock_done.index = 0,
		.div_s.value = (1 << 27),
		.div_s.index = 0,
		.mod_en.value = (1 << 26),
		.mod_en.index = 0,
		.sdm_en.value = (1 << 25),
		.sdm_en.index = 0,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 20),
		.ibias_msk.index = 0,
		.pll_n_msk.value = 0x7f,
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 25),
		.nint_msk.index = 1,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0x0,
		.postdiv_msk.value = 0x0,
		.itable = sc9860_adjustable_pll1_table,
	},
	{
		.name  = "clk_cppll",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 17),
		.lock_done.index = 0,
		.div_s.value = (1 << 15),
		.div_s.index = 0,
		.mod_en.value = (1 << 14),
		.mod_en.index = 0,
		.sdm_en.value = (1 << 13),
		.sdm_en.index = 0,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 8),
		.ibias_msk.index = 0,
		.pll_n_msk.value = 0x7f,
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 25),
		.nint_msk.index = 1,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0x0,
		.postdiv_msk.value = 0x0,
		.itable = sc9860_adjustable_pll1_table,
	},
	{
	/* rpll register bit is different from other plls. */
		.name  = "clk_rpll0",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 0),
		.lock_done.index = 0,
		.div_s.value = (1 << 3),
		.div_s.index = 0,
		.mod_en.value = (1 << 16),
		.mod_en.index = 2,
		.sdm_en.value = (1 << 17),
		.sdm_en.index = 2,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 14),
		.ibias_msk.index = 0,
		.pll_n_msk.value = (0x7f << 16),
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 4),
		.nint_msk.index = 0,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0x0,
		.postdiv_msk.value = 0x0,
		.itable = sc9860_adjustable_pll1_table,
	},
	{
		.name  = "clk_rpll1",
		.udelay = SPRD_DELAY_200,
		.lock_done.value = (1 << 0),
		.lock_done.index = 0,
		.div_s.value = (1 << 3),
		.div_s.index = 0,
		.mod_en.value = (1 << 16),
		.mod_en.index = 2,
		.sdm_en.value = (1 << 17),
		.sdm_en.index = 2,
		.refin_msk.value = 0,
		.refin_msk.index = 0,
		.ibias_msk.value = (3 << 14),
		.ibias_msk.index = 0,
		.pll_n_msk.value = (0x7f << 16),
		.pll_n_msk.index = 0,
		.nint_msk.value = (0x7f << 4),
		.nint_msk.index = 0,
		.kint_msk.value = 0x7fffff,
		.kint_msk.index = 1,
		.prediv_msk.value = 0x0,
		.postdiv_msk.value = 0x0,
		.itable = sc9860_adjustable_pll1_table,
	},

	/* add configures above this */
	{
		.name = NULL,
	}
};
#endif
